spring:
  messages:
    basename: validation
  datasource:
    url: jdbc:postgresql://localhost:5432/cabdb?allowPublicKeyRetrieval=true&createDatabaseIfNotExist=true&autoReconnect=true&useSSL=false
    username: def_user
    password: pass
  application:
    name: PASSENGER-SERVICE
  jpa:
    show-sql: true
    properties:
      hibernate:
        '[format_sql]': true
    hibernate:
      ddl-auto: validate
    generate-ddl: false
  liquibase:
    change-log: classpath:db/changelog/db.changelog-master.xml
    enabled: true
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8181/realms/taxi-realm
          jwk-set-uri: http://localhost:8181/realms/taxi-realm/protocol/openid-connect/certs
  kafka:
    bootstrap-servers: localhost:9092
    consumer:
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.springframework.kafka.support.serializer.JsonDeserializer
      properties:
        spring.json:
          trusted.packages: "*"
          type.mapping: RatingToPassengerRequest:com.nikonenko.passengerservice.dto.RatingToPassengerRequest
      group-id: passenger-group
      auto-offset-reset: latest
      rating-topic-name: passenger-rating-topic
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring.json.type.mapping: ReviewRequest:com.nikonenko.passengerservice.dto.ReviewRequest, CustomerCreationRequest:com.nikonenko.passengerservice.dto.CustomerCreationRequest
      passenger-review-topic:
        name: passenger-review-topic
      payment-customer-topic:
        name: payment-customer-topic

eureka:
  client:
    service-url:
      defaultZone: http://eureka@localhost:8761/eureka/
server:
  port: 8081

feign:
  client:
    config:
      payment:
        name: PAYMENT-SERVICE
        path: /api/v1/payments
      ride:
        name: RIDE-SERVICE
        path: /api/v1/rides

resilience4j:
  circuitbreaker:
    instances:
      rideBreaker: &circuitbreakerConfig
        slidingWindowSize: 10
        permittedNumberOfCallsInHalfOpenState: 3
        slidingWindowType: TIME_BASED
        minimumNumberOfCalls: 20
        waitDurationInOpenState: 50s
        failureRateThreshold: 50
        eventConsumerBufferSize: 10
      paymentBreaker: *circuitbreakerConfig
  retry:
    instances:
      rideRetry: &retryConfig
        maxAttempts: 3
        waitDuration: 30s
        enableExponentialBackoff: true
        exponentialBackoffMultiplier: 2
      paymentRetry: *retryConfig

management:
  endpoints:
    web:
      exposure:
        include: [ "prometheus", "health"]
  metrics:
    tags:
      application: ${spring.application.name}
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    sampling:
      rate: 1.0
      probability: 1.0

jwt:
  auth:
    converter:
      resource-id: taxi-realm
      principal-attribute: sub

webclient:
  ride-service: http://RIDE-SERVICE